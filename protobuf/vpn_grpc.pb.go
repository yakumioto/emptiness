// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: vpn.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VPN_RegisterRoute_FullMethodName   = "/VPN/RegisterRoute"
	VPN_UnregisterRoute_FullMethodName = "/VPN/UnregisterRoute"
	VPN_TransferData_FullMethodName    = "/VPN/TransferData"
)

// VPNClient is the client API for VPN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VPNClient interface {
	RegisterRoute(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UnregisterRoute(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	TransferData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error)
}

type vPNClient struct {
	cc grpc.ClientConnInterface
}

func NewVPNClient(cc grpc.ClientConnInterface) VPNClient {
	return &vPNClient{cc}
}

func (c *vPNClient) RegisterRoute(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, VPN_RegisterRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPNClient) UnregisterRoute(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, VPN_UnregisterRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPNClient) TransferData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VPN_ServiceDesc.Streams[0], VPN_TransferData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VPN_TransferDataClient = grpc.BidiStreamingClient[StreamRequest, StreamResponse]

// VPNServer is the server API for VPN service.
// All implementations must embed UnimplementedVPNServer
// for forward compatibility.
type VPNServer interface {
	RegisterRoute(context.Context, *Request) (*Response, error)
	UnregisterRoute(context.Context, *Request) (*Response, error)
	TransferData(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error
	mustEmbedUnimplementedVPNServer()
}

// UnimplementedVPNServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVPNServer struct{}

func (UnimplementedVPNServer) RegisterRoute(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRoute not implemented")
}
func (UnimplementedVPNServer) UnregisterRoute(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterRoute not implemented")
}
func (UnimplementedVPNServer) TransferData(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TransferData not implemented")
}
func (UnimplementedVPNServer) mustEmbedUnimplementedVPNServer() {}
func (UnimplementedVPNServer) testEmbeddedByValue()             {}

// UnsafeVPNServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VPNServer will
// result in compilation errors.
type UnsafeVPNServer interface {
	mustEmbedUnimplementedVPNServer()
}

func RegisterVPNServer(s grpc.ServiceRegistrar, srv VPNServer) {
	// If the following call pancis, it indicates UnimplementedVPNServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VPN_ServiceDesc, srv)
}

func _VPN_RegisterRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPNServer).RegisterRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VPN_RegisterRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPNServer).RegisterRoute(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPN_UnregisterRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPNServer).UnregisterRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VPN_UnregisterRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPNServer).UnregisterRoute(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPN_TransferData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VPNServer).TransferData(&grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VPN_TransferDataServer = grpc.BidiStreamingServer[StreamRequest, StreamResponse]

// VPN_ServiceDesc is the grpc.ServiceDesc for VPN service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VPN_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VPN",
	HandlerType: (*VPNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRoute",
			Handler:    _VPN_RegisterRoute_Handler,
		},
		{
			MethodName: "UnregisterRoute",
			Handler:    _VPN_UnregisterRoute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransferData",
			Handler:       _VPN_TransferData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vpn.proto",
}
